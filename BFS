local nodesFolder = workspace:WaitForChild("placeditems"):WaitForChild("nodes")
local stepSize = 4

-- Build grid map of nodes
local nodeMap = {}
for _, node in pairs(nodesFolder:GetChildren()) do
	if node:IsA("BasePart") then
		local x = math.round(node.Position.X / stepSize)
		local z = math.round(node.Position.Z / stepSize)
		local key = x .. "," .. z
		nodeMap[key] = node
	end
end

local visited = {}
local groups = {}

-- 4-directional (N, S, E, W) grid directions
local directions = {
	Vector2.new(1, 0),
	Vector2.new(-1, 0),
	Vector2.new(0, 1),
	Vector2.new(0, -1),
}

-- BFS to explore connected node groups
local function bfs(startKey)
	local queue = {startKey}
	local group = {}
	visited[startKey] = true

	while #queue > 0 do
		local currentKey = table.remove(queue, 1)
		local currentNode = nodeMap[currentKey]
		table.insert(group, currentNode)

		local x, z = currentKey:match("([^,]+),([^,]+)")
		x, z = tonumber(x), tonumber(z)

		for _, dir in ipairs(directions) do
			local nx = x + dir.X
			local nz = z + dir.Y
			local neighborKey = nx .. "," .. nz

			if nodeMap[neighborKey] and not visited[neighborKey] then
				visited[neighborKey] = true
				table.insert(queue, neighborKey)
			end
		end
	end

	return group
end

-- Main detection loop
for key, node in pairs(nodeMap) do
	if not visited[key] then
		local group = bfs(key)

		if #group >= 3 then
			table.insert(groups, group)
			local roomColor = BrickColor.Random()
			for _, part in ipairs(group) do
				part.BrickColor = roomColor
			end

			-- Debug output
			local minX, maxX = math.huge, -math.huge
			local minZ, maxZ = math.huge, -math.huge
			for _, p in ipairs(group) do
				minX = math.min(minX, p.Position.X)
				maxX = math.max(maxX, p.Position.X)
				minZ = math.min(minZ, p.Position.Z)
				maxZ = math.max(maxZ, p.Position.Z)
			end
			local sizeX = (maxX - minX) + stepSize
			local sizeZ = (maxZ - minZ) + stepSize
			print(string.format("Detected Room Size: (%.1f, 1, %.1f)", sizeX, sizeZ))
		end
	end
end

-- Visualize room areas
for _, group in ipairs(groups) do
	local minX, maxX = math.huge, -math.huge
	local minZ, maxZ = math.huge, -math.huge
	local y = group[1].Position.Y

	for _, node in ipairs(group) do
		local pos = node.Position
		minX = math.min(minX, pos.X)
		maxX = math.max(maxX, pos.X)
		minZ = math.min(minZ, pos.Z)
		maxZ = math.max(maxZ, pos.Z)
	end

	local sizeX = (maxX - minX) + stepSize
	local sizeZ = (maxZ - minZ) + stepSize
	local center = Vector3.new((minX + maxX)/2, y, (minZ + maxZ)/2)

	local part = Instance.new("Part")
	part.Anchored = true
	part.Size = Vector3.new(sizeX - 3.4, 1, sizeZ - 3.4)
	part.Position = center + Vector3.new(0, 0.5, 0)
	part.BrickColor = BrickColor.Random()
	part.Material = Enum.Material.SmoothPlastic
	part.CanCollide = false
	part.Name = "BuildZone"
	part.Parent = workspace
end
